package ftprotocol

import (
	//	"bytes"
	"encoding/hex"
	"errors"
	"reflect"
	"testing"
)

func TestByteArray(t *testing.T) {
	cases := []struct {
		in   Frame
		want string
	}{
		{Frame{NoAck: true}, "00003030303000"},
		{Frame{Start: STX, End: ETX}, "060002003032303003"},
	}

	for _, c := range cases {
		//		c.in.NoAck = true
		output := c.in.ByteArray()

		got := hex.EncodeToString(output)

		if c.want != got {
			t.Errorf("ByteArray(),\nwant\t%s\ngot\t%s\n", c.want, got)
		}
	}
}

func TestParse(t *testing.T) {
	cases := []struct {
		in    string
		want1 string
		want2 string
		want3 error
	}{
		{"0630", "", "4646", nil},
		{"06", "", "", errors.New("invalid length")},
		{"06309", "", "", errors.New("invalid length")},
		{"0245353231323030202020202020202029524420202020202020203342202020202f4820202020262020202020202020202020314630370306300630", "06300630", "3132", nil},
		{"06300245353231323030202020202020202029524420202020202020203342202020202f48202020202620202020202020202020203146303703", "", "3132", nil},
		{"06300245353231323030202020202020202029524420202020202020203342202020202f482020202026202020202020202020202031463037030630", "0630", "3132", nil},
		{"0245353231323030202020202020202029524420202020202020203342202020202f4820202020262020202020202020202020314630370306300245353231323030202020202020202029524420202020202020203342202020202f482020202026202020202020202020202031463037030630", "06300245353231323030202020202020202029524420202020202020203342202020202f482020202026202020202020202020202031463037030630", "3132", nil},
		{"06300238353031323030202020202020202029524420202020202020203342202020202f482020202026202020202020202020202046373036030630", "0630", "3132", nil},
		{"0239303431453030202020203024394F3C462D4535272949383630402A25312D2A302020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202043363932030631", "0631", "3145", nil},
		{"063306340233353631453030202020203024394F3C462D4535272949383630402A25312D2A30202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020204342444303", "", "3145", nil},
		{"3039302D303343202020286E756C6C290D0A4D6F6E6F32205363616E6E6572202020202020", "", "", errors.New("unknown beginning of message.")},
		{"06380635024541323345303020202020392034374137030630", "0630", "3345", nil},
		{e5f4f5b5e5c2020202020305629535a34224020202020202020212f4922423744205d5d2d5450423721592c55263f2d23222a4a2c545d4c465a262c2845503e3322294c32405f402020382f58205c4524292140412420202020202f5b5c4a3823562c222b54202020202020202020202020202020225f2f4b594f4f254f2e3e2322293c273453343f29592c284a492b535036584a2c50423721552c2845503d335e2020213c5f402020373044272e3950202020202020202020202f385a284d50202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020203537304503", "3630", nil},
	}
	for _, c := range cases {
		var got Frame
		input, _ := hex.DecodeString(c.in)
		got1, got3 := got.Parse(input)
		got2 := hex.EncodeToString(got.MessageID)
		if got1 != c.want1 || got2 != c.want2 || !reflect.DeepEqual(got3, c.want3) {
			t.Errorf("Parse(),\nin\t%s\nwant\t|%s|\t%s\t%v\ngot\t|%s|\t%s\t%v\n", c.in, c.want1, c.want2, c.want3, got1, got2, got3)

		}

	}

}
